#ifndef PIECE_SQUARE_TABLES_H
#define PIECE_SQUARE_TABLES_H


//const int EMPTY = 0;
//const int KING = 1;
//const int PAWN = 2;
//const int KNIGHT = 3;
//const int BISHOP = 4;
//const int ROOK = 5;
//const int QUEEN = 6;
//
//const int White = 8;
//const int Black = 16;


struct PieceSquareTables{

    const int Table[7][64] = 
    {
        {
              0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,
              0,  0,  0,  0,  0,  0,  0,  0,
        },
        {
            -30,-40,-40,-50,-50,-40,-40,-30,
            -30,-40,-40,-50,-50,-40,-40,-30,
            -30,-40,-40,-50,-50,-40,-40,-30,
            -30,-40,-40,-50,-50,-40,-40,-30,
            -20,-30,-30,-40,-40,-30,-30,-20,
            -10,-20,-20,-20,-20,-20,-20,-10,
             20, 20,  0,  0,  0,  0, 20, 20,
             20, 30, 10,  0,  0, 10, 30, 20
        },
        {
             0,  0,  0,  0,  0,  0,  0,  0,
            50, 50, 50, 50, 50, 50, 50, 50,
            10, 10, 20, 30, 30, 20, 10, 10,
             5,  5, 10, 25, 25, 10,  5,  5,
             0,  0,  0, 20, 20,  0,  0,  0,
             5, -5,-10,  0,  0,-10, -5,  5,
             5, 10, 10,-20,-20, 10, 10,  5,
             0,  0,  0,  0,  0,  0,  0,  0
        },
        {
            -50,-40,-30,-30,-30,-30,-40,-50,
            -40,-20,  0,  0,  0,  0,-20,-40,
            -30,  0, 10, 15, 15, 10,  0,-30,
            -30,  5, 15, 20, 20, 15,  5,-30,
            -30,  0, 15, 20, 20, 15,  0,-30,
            -30,  5, 10, 15, 15, 10,  5,-30,
            -40,-20,  0,  5,  5,  0,-20,-40,
            -50,-40,-30,-30,-30,-30,-40,-50
        },
        {
            -20,-10,-10,-10,-10,-10,-10,-20,
            -10,  0,  0,  0,  0,  0,  0,-10,
            -10,  0,  5, 10, 10,  5,  0,-10,
            -10,  5,  5, 10, 10,  5,  5,-10,
            -10,  0, 10, 10, 10, 10,  0,-10,
            -10, 10, 10, 10, 10, 10, 10,-10,
            -10,  5,  0,  0,  0,  0,  5,-10,
            -20,-10,-10,-10,-10,-10,-10,-20
        },
        {
             0,  0,  0,  0,  0,  0,  0,  0,
             5, 10, 10, 10, 10, 10, 10,  5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
            -5,  0,  0,  0,  0,  0,  0, -5,
             0,  0,  0,  5,  5,  0,  0,  0
        },
        {
            -20,-10,-10, -5, -5,-10,-10,-20,
            -10,  0,  0,  0,  0,  0,  0,-10,
            -10,  0,  5,  5,  5,  5,  0,-10,
             -5,  0,  5,  5,  5,  5,  0, -5,
              0,  0,  5,  5,  5,  5,  0, -5,
            -10,  5,  5,  5,  5,  5,  0,-10,
            -10,  0,  5,  0,  0,  0,  0,-10,
            -20,-10,-10, -5, -5,-10,-10,-20
        },
    };

    int InvertedTable[7][64] = { 0 };

    //const int PawnPST[64] = 
    //{
    //     0,  0,  0,  0,  0,  0,  0,  0,
    //    50, 50, 50, 50, 50, 50, 50, 50,
    //    10, 10, 20, 30, 30, 20, 10, 10,
    //     5,  5, 10, 25, 25, 10,  5,  5,
    //     0,  0,  0, 20, 20,  0,  0,  0,
    //     5, -5,-10,  0,  0,-10, -5,  5,
    //     5, 10, 10,-20,-20, 10, 10,  5,
    //     0,  0,  0,  0,  0,  0,  0,  0
    //};

    //const int RooksPST[64] = 
    //{
    //     0,  0,  0,  0,  0,  0,  0,  0,
    //     5, 10, 10, 10, 10, 10, 10,  5,
    //    -5,  0,  0,  0,  0,  0,  0, -5,
    //    -5,  0,  0,  0,  0,  0,  0, -5,
    //    -5,  0,  0,  0,  0,  0,  0, -5,
    //    -5,  0,  0,  0,  0,  0,  0, -5,
    //    -5,  0,  0,  0,  0,  0,  0, -5,
    //     0,  0,  0,  5,  5,  0,  0,  0
    //};

    //const int KnightsPST[64] = 
    //{
    //    -50,-40,-30,-30,-30,-30,-40,-50,
    //    -40,-20,  0,  0,  0,  0,-20,-40,
    //    -30,  0, 10, 15, 15, 10,  0,-30,
    //    -30,  5, 15, 20, 20, 15,  5,-30,
    //    -30,  0, 15, 20, 20, 15,  0,-30,
    //    -30,  5, 10, 15, 15, 10,  5,-30,
    //    -40,-20,  0,  5,  5,  0,-20,-40,
    //    -50,-40,-30,-30,-30,-30,-40,-50
    //};

    //const int BishopsPST[64] = 
    //{
    //    -20,-10,-10,-10,-10,-10,-10,-20,
    //    -10,  0,  0,  0,  0,  0,  0,-10,
    //    -10,  0,  5, 10, 10,  5,  0,-10,
    //    -10,  5,  5, 10, 10,  5,  5,-10,
    //    -10,  0, 10, 10, 10, 10,  0,-10,
    //    -10, 10, 10, 10, 10, 10, 10,-10,
    //    -10,  5,  0,  0,  0,  0,  5,-10,
    //    -20,-10,-10,-10,-10,-10,-10,-20
    //};

    //const int QueensPST[64] = 
    //{
    //    -20,-10,-10, -5, -5,-10,-10,-20,
    //    -10,  0,  0,  0,  0,  0,  0,-10,
    //    -10,  0,  5,  5,  5,  5,  0,-10,
    //     -5,  0,  5,  5,  5,  5,  0, -5,
    //      0,  0,  5,  5,  5,  5,  0, -5,
    //    -10,  5,  5,  5,  5,  5,  0,-10,
    //    -10,  0,  5,  0,  0,  0,  0,-10,
    //    -20,-10,-10, -5, -5,-10,-10,-20
    //};

    //const int KingPST[64] = 
    //{
    //    -30,-40,-40,-50,-50,-40,-40,-30,
    //    -30,-40,-40,-50,-50,-40,-40,-30,
    //    -30,-40,-40,-50,-50,-40,-40,-30,
    //    -30,-40,-40,-50,-50,-40,-40,-30,
    //    -20,-30,-30,-40,-40,-30,-30,-20,
    //    -10,-20,-20,-20,-20,-20,-20,-10,
    //     20, 20,  0,  0,  0,  0, 20, 20,
    //     20, 30, 10,  0,  0, 10, 30, 20
    //};

    //const int KingEndgamePST[64] = {
    //    -50,-40,-30,-20,-20,-30,-40,-50,
    //    -30,-20,-10,  0,  0,-10,-20,-30,
    //    -30,-10, 20, 30, 30, 20,-10,-30,
    //    -30,-10, 30, 40, 40, 30,-10,-30,
    //    -30,-10, 30, 40, 40, 30,-10,-30,
    //    -30,-10, 20, 30, 30, 20,-10,-30,
    //    -30,-30,  0,  0,  0,  0,-30,-30,
    //    -50,-30,-30,-30,-30,-30,-30,-50
    //};

    //int 
    PieceSquareTables() {
        for (int i = 1; i < 7; i++) {
            for (int j = 0; j < Total_tiles; j++) {
                InvertedTable[i][j] = Table[i][63 - j];
            }
        }
    }

    int getPSTValue(ChessPiece* piece, int squareIndex, char currentPlayerColor) const {
        return (currentPlayerColor == Black) ? InvertedTable[piece->type][squareIndex] : Table[piece->type][squareIndex];
    }

};


#endif // !PIECE_SQUARE_TABLES_H
